
Full Stack Registration Form Project (React + Express + Multer + MongoDB Atlas)
================================================================================

📁 Folder Structure:
--------------------
registration-app/
├── client/                    # Frontend React app
│   ├── src/
│   │   ├── App.jsx
│   │   ├── RegistrationForm.jsx
│   │   └── index.js
│   └── package.json
├── server/                    # Backend Express server
│   ├── index.js
│   ├── models/
│   │   └── User.js
│   ├── uploads/               # Folder where uploaded files will be stored
│   └── package.json
└── README.txt (this file)

====================================================================
🔧 Step-by-Step Setup:
====================================================================

1. 📦 Initialize Backend (server):
----------------------------------
Create the folder `server`, and run:

    npm init -y
    npm install express multer mongoose cors

Then create the following files:

▶ server/index.js
------------------
const express = require('express');
const mongoose = require('mongoose');
const cors = require('cors');
const multer = require('multer');
const path = require('path');
const User = require('./models/User');

const app = express();
app.use(cors());
app.use(express.json());
app.use('/uploads', express.static(path.join(__dirname, 'uploads')));

mongoose.connect('YOUR_MONGODB_ATLAS_URI')
  .then(() => console.log('MongoDB connected'))
  .catch(err => console.error(err));

const storage = multer.diskStorage({
  destination: (req, file, cb) => cb(null, 'uploads/'),
  filename: (req, file, cb) => cb(null, Date.now() + '-' + file.originalname)
});

const upload = multer({ storage });

app.post('/register', upload.single('file'), async (req, res) => {
  try {
    const { name, email, dob, residentialAddress, permanentAddress } = req.body;
    const filePath = req.file ? req.file.path : '';
    const user = new User({ name, email, dob, residentialAddress, permanentAddress, filePath });
    await user.save();
    res.status(201).json({ message: 'User registered' });
  } catch (err) {
    res.status(500).json({ error: 'Error saving user' });
  }
});

app.get('/submissions', async (req, res) => {
  const users = await User.find();
  res.json(users);
});

app.listen(5000, () => console.log('Server running on port 5000'));

▶ server/models/User.js
-------------------------
const mongoose = require('mongoose');

const userSchema = new mongoose.Schema({
  name: String,
  email: String,
  dob: String,
  residentialAddress: String,
  permanentAddress: String,
  filePath: String,
});

module.exports = mongoose.model('User', userSchema);

====================================================================

2. 🎨 Setup Frontend (client):
------------------------------

Run in terminal:

    npx create-react-app client
    cd client
    npm install axios

Then create the following files:

▶ client/src/index.js
-----------------------
import React from 'react';
import ReactDOM from 'react-dom/client';
import App from './App';

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(<App />);

▶ client/src/App.jsx
----------------------
import React, { useState, useEffect } from 'react';
import RegistrationForm from './RegistrationForm';
import axios from 'axios';

const App = () => {
  const [submittedData, setSubmittedData] = useState([]);

  const fetchData = async () => {
    const res = await axios.get('http://localhost:5000/submissions');
    setSubmittedData(res.data);
  };

  return (
    <div>
      <RegistrationForm onSubmitSuccess={fetchData} />
      <button 
        onClick={fetchData} 
        disabled={submittedData.length === 0}
        style={{ marginTop: '20px' }}
      >
        Submitted Data
      </button>
      <div>
        {submittedData.map((user, idx) => (
          <div key={idx} style={{ border: '1px solid #ccc', margin: '10px', padding: '10px' }}>
            <p><strong>Name:</strong> {user.name}</p>
            <p><strong>Email:</strong> {user.email}</p>
            <p><strong>DOB:</strong> {user.dob}</p>
            <p><strong>Residential Address:</strong> {user.residentialAddress}</p>
            <p><strong>Permanent Address:</strong> {user.permanentAddress}</p>
            {user.filePath && <p><a href={`http://localhost:5000/${user.filePath}`} target="_blank">View File</a></p>}
          </div>
        ))}
      </div>
    </div>
  );
};

export default App;

▶ client/src/RegistrationForm.jsx
-----------------------------------
import React, { useState } from 'react';
import axios from 'axios';

const RegistrationForm = ({ onSubmitSuccess }) => {
  const [form, setForm] = useState({
    name: '',
    email: '',
    dob: '',
    residentialAddress: '',
    permanentAddress: '',
  });
  const [sameAddress, setSameAddress] = useState(false);
  const [file, setFile] = useState(null);

  const handleChange = (e) => {
    const { name, value } = e.target;
    setForm(prev => ({ ...prev, [name]: value }));
  };

  const handleCheckbox = () => {
    const updated = !sameAddress;
    setSameAddress(updated);
    if (!sameAddress) {
      setForm(prev => ({
        ...prev,
        permanentAddress: prev.residentialAddress
      }));
    }
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    const formData = new FormData();
    for (let key in form) {
      formData.append(key, form[key]);
    }
    if (file) formData.append('file', file);

    try {
      await axios.post('http://localhost:5000/register', formData);
      alert('Registered successfully');
      setForm({
        name: '',
        email: '',
        dob: '',
        residentialAddress: '',
        permanentAddress: '',
      });
      setFile(null);
      setSameAddress(false);
      if (onSubmitSuccess) onSubmitSuccess();
    } catch (err) {
      alert('Submission failed');
    }
  };

  return (
    <form onSubmit={handleSubmit} style={{ width: '400px', margin: 'auto' }}>
      <h2>Registration Form</h2>
      <input type="text" name="name" placeholder="Name" value={form.name} onChange={handleChange} required /><br />
      <input type="email" name="email" placeholder="Email" value={form.email} onChange={handleChange} required /><br />
      <input type="date" name="dob" value={form.dob} onChange={handleChange} required /><br />
      <textarea name="residentialAddress" placeholder="Residential Address" value={form.residentialAddress} onChange={handleChange} required /><br />
      <label>
        <input type="checkbox" checked={sameAddress} onChange={handleCheckbox} />
        Same as Residential Address
      </label><br />
      <textarea name="permanentAddress" placeholder="Permanent Address" value={form.permanentAddress} onChange={handleChange} required /><br />
      <input type="file" onChange={(e) => setFile(e.target.files[0])} required /><br /><br />
      <button type="submit">Register</button>
    </form>
  );
};

export default RegistrationForm;

====================================================================
✅ RUNNING THE APP:
--------------------
1. Start Backend:
   cd server
   node index.js

2. Start Frontend:
   cd client
   npm start

That's it! You now have a working registration app.
