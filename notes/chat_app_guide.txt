
==============================
Real-Time Chat Application with MERN & WebSockets
==============================

PART 1: PROJECT OVERVIEW
------------------------------
We are building a real-time chat application using the MERN stack (MongoDB, Express, React, Node.js) and WebSockets via Socket.IO. This app allows users to register, log in, and chat with other users in real-time.

==============================
PART 2: PROJECT STRUCTURE & SETUP
==============================

A. BACKEND SETUP (Node.js + Express + MongoDB + Socket.IO)
-----------------------------------------------------------

1. Initialize a Node.js project:
   - Run: `npm init -y`

2. Install dependencies:
   - Express: `npm install express`
   - Mongoose (MongoDB driver): `npm install mongoose`
   - BcryptJS (password hashing): `npm install bcryptjs`
   - JWT (authentication): `npm install jsonwebtoken`
   - Cookie Parser: `npm install cookie-parser`
   - Socket.IO: `npm install socket.io`
   - CORS: `npm install cors`

3. File structure (backend):
   /server
     ├── index.js
     ├── models/User.js
     ├── routes/auth.js
     ├── routes/chat.js
     ├── middleware/auth.js

4. Core backend functionality:
   - User registration (with hashed password)
   - User login (with JWT and cookies)
   - Authentication middleware to protect routes
   - WebSocket setup using Socket.IO for real-time communication

B. FRONTEND SETUP (React + Socket.IO Client)
--------------------------------------------

1. Create React App:
   - Run: `npx create-react-app client`

2. Install dependencies:
   - Axios (HTTP requests): `npm install axios`
   - React Router DOM: `npm install react-router-dom`
   - Socket.IO client: `npm install socket.io-client`

3. File structure (frontend):
   /client
     ├── src
     │   ├── App.js
     │   ├── components/
     │   ├── pages/
     │   ├── context/UserContext.js
     │   └── socket.js

4. Core frontend functionality:
   - User registration and login forms
   - Protected chat UI once logged in
   - Socket.IO connection to server for real-time messages
   - Context for managing authenticated user

==============================
PART 3: HOW IT WORKS
==============================

A. Authentication Flow:
------------------------
1. User signs up -> password is hashed and saved in MongoDB.
2. User logs in -> JWT token is created and stored in cookies.
3. On frontend load, we check the cookie for a token -> if valid, allow access to chat.

B. Real-Time Chat Flow:
------------------------
1. Socket.IO server listens for `connection` event.
2. Clients emit `join` and `sendMessage` events.
3. Server receives `sendMessage` and broadcasts it using `io.emit`.
4. All connected clients receive new messages in real-time.

==============================
PART 4: DEPLOYMENT (Optional)
==============================

- Backend: Deploy using services like Render, Railway, or Heroku.
- Frontend: Use Netlify or Vercel.
- Ensure backend and frontend are using HTTPS and CORS properly.

