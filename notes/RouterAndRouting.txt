🔴 12. Express Router (Modular Routing)

Modular routing helps you break your routes into multiple files for better maintainability. You can separate each feature into its own file and load it in your main server file.

---

 📁 Folder Structure


student-api/
│
├── server.js
├── .env
├── package.json
│
├── /routes
│   ├── authRoutes.js
│   └── studentRoutes.js
│
├── /models
│   ├── User.js
│   └── Student.js
│
├── /middleware
│   └── authMiddleware.js


---

 🔍 12.1 What is Router?

`express.Router()` is a mini Express app. It allows you to define route handlers in separate modules and mount them under a base path.

---

 ⚙️ 12.2 Creating and Using Routers

 👉 Create `routes/authRoutes.js`

js
const express = require('express');
const jwt = require('jsonwebtoken');
const User = require('../models/User');
const router = express.Router();

// Register
router.post('/register', async (req, res, next) => {
  try {
    const { username, password } = req.body;
    const existing = await User.findOne({ username });
    if (existing) return res.status(400).json({ error: 'User already exists' });

    const user = new User({ username, password });
    await user.save();
    res.status(201).json({ message: 'User registered successfully' });
  } catch (err) {
    next(err);
  }
});

// Login
router.post('/login', async (req, res, next) => {
  try {
    const { username, password } = req.body;
    const user = await User.findOne({ username });
    if (!user || !(await user.comparePassword(password))) {
      return res.status(400).json({ error: 'Invalid credentials' });
    }

    const token = jwt.sign(
      { id: user._id, username: user.username },
      process.env.JWT_SECRET,
      { expiresIn: '1h' }
    );

    res.json({ token });
  } catch (err) {
    next(err);
  }
});

module.exports = router;


---

 👉 Create `routes/studentRoutes.js`

js
const express = require('express');
const authenticate = require('../middleware/authMiddleware');
const Student = require('../models/Student');

const router = express.Router();

// Protected route: Get students
router.get('/', authenticate, async (req, res, next) => {
  try {
    const students = await Student.find();
    res.json(students);
  } catch (err) {
    next(err);
  }
});

// Add student
router.post('/', authenticate, async (req, res, next) => {
  try {
    const { name, course } = req.body;
    const newStudent = new Student({ name, course });
    await newStudent.save();
    res.status(201).json(newStudent);
  } catch (err) {
    next(err);
  }
});

module.exports = router;


---

 🧩 12.3 Use Routes in `server.js`

js
require('dotenv').config();
const express = require('express');
const mongoose = require('mongoose');
const authRoutes = require('./routes/authRoutes');
const studentRoutes = require('./routes/studentRoutes');

const app = express();
const PORT = process.env.PORT || 3000;

// Middleware
app.use(express.json());

// DB Connection
mongoose.connect(process.env.MONGO_URI)
  .then(() => console.log('MongoDB connected'))
  .catch(err => console.log(err));

// Use Routes
app.use('/api/auth', authRoutes);
app.use('/api/students', studentRoutes);

// 404
app.use((req, res) => {
  res.status(404).json({ error: 'Route not found' });
});

// Error Middleware
app.use((err, req, res, next) => {
  console.error(err.stack);
  res.status(500).json({ error: 'Something went wrong' });
});

app.listen(PORT, () => {
  console.log(`Server running at http://localhost:${PORT}`);
});


---

 ✅ Example API Usage

 `POST /api/auth/register`
 `POST /api/auth/login`
 `GET /api/students` (protected)
 `POST /api/students` (protected)

> Important: Use the Bearer token returned from `/login` in the header for protected routes:


Authorization: Bearer <token>

