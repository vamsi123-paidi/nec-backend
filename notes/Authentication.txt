🔴 11. Authentication & Authorization with JWT

In modern web applications, authentication ensures the user is who they say they are, and authorization ensures the user has permission to access a resource. We'll use JWT (JSON Web Tokens) for stateless auth — the most common method in REST APIs.

---

 📁 Folder Structure (Authentication Edition)


student-api/
│
├── .env
├── package.json
├── server.js
├── /models
│   └── User.js
├── /middleware
│   └── authMiddleware.js


---

 🔧 Step 1: Install Packages

bash
npm install express mongoose dotenv bcryptjs jsonwebtoken


---

 🔐 11.1 Introduction to Auth – User Model

Create `models/User.js`:

js
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
  username: {
    type: String,
    required: true,
    unique: true,
    trim: true
  },
  password: {
    type: String,
    required: true
  }
});

// Hash password before saving
userSchema.pre('save', async function(next) {
  if (!this.isModified('password')) return next();
  const salt = await bcrypt.genSalt(10);
  this.password = await bcrypt.hash(this.password, salt);
  next();
});

// Method to compare password
userSchema.methods.comparePassword = function(candidatePassword) {
  return bcrypt.compare(candidatePassword, this.password);
};

module.exports = mongoose.model('User', userSchema);


---

 🔒 11.2 JWT Authentication Middleware

Create `middleware/authMiddleware.js`:

js
const jwt = require('jsonwebtoken');

const authenticate = (req, res, next) => {
  const token = req.header('Authorization')?.replace('Bearer ', '');
  if (!token) return res.status(401).json({ error: 'No token provided' });

  try {
    const decoded = jwt.verify(token, process.env.JWT_SECRET);
    req.user = decoded; // put user info in req
    next();
  } catch (err) {
    res.status(401).json({ error: 'Invalid token' });
  }
};

module.exports = authenticate;


---

 🔐 11.3 Register/Login/Protected Routes in `server.js`

> Make sure `.env` contains:

env
PORT=3000
MONGO_URI=your_mongo_uri
JWT_SECRET=your_super_secret


Add to `server.js`:

js
require('dotenv').config();
const express = require('express');
const mongoose = require('mongoose');
const jwt = require('jsonwebtoken');
const User = require('./models/User');
const authenticate = require('./middleware/authMiddleware');

const app = express();
const PORT = process.env.PORT || 3000;

app.use(express.json());

// Connect to MongoDB
mongoose.connect(process.env.MONGO_URI)
  .then(() => console.log('MongoDB connected'))
  .catch(err => console.log(err));

// 📌 Register
app.post('/register', async (req, res, next) => {
  try {
    const { username, password } = req.body;
    const existing = await User.findOne({ username });
    if (existing) return res.status(400).json({ error: 'User already exists' });

    const user = new User({ username, password });
    await user.save();

    res.status(201).json({ message: 'User registered successfully' });
  } catch (err) {
    next(err);
  }
});

// 🔑 Login
app.post('/login', async (req, res, next) => {
  try {
    const { username, password } = req.body;
    const user = await User.findOne({ username });
    if (!user || !(await user.comparePassword(password))) {
      return res.status(400).json({ error: 'Invalid credentials' });
    }

    const token = jwt.sign(
      { id: user._id, username: user.username },
      process.env.JWT_SECRET,
      { expiresIn: '1h' }
    );

    res.json({ token });
  } catch (err) {
    next(err);
  }
});

// 🔒 Protected Route
app.get('/dashboard', authenticate, (req, res) => {
  res.json({ message: `Welcome, ${req.user.username}` });
});

// 404 and Error Handling
app.use((req, res) => {
  res.status(404).json({ error: 'Route not found' });
});
app.use((err, req, res, next) => {
  console.error(err.message);
  res.status(500).json({ error: 'Server error' });
});

app.listen(PORT, () => {
  console.log(`Server running at http://localhost:${PORT}`);
});


---

 🧪 Testing with Postman

 1️⃣ Register User

POST `http://localhost:3000/register`
Body:

json
{
  "username": "admin",
  "password": "secret123"
}


 2️⃣ Login

POST `http://localhost:3000/login`
Response:

json
{
  "token": "eyJhbGciOiJIUzI1NiIsIn..."
}


 3️⃣ Access Protected Route

GET `http://localhost:3000/dashboard`
Headers:


Authorization: Bearer <paste-token-here>


Response:

json
{
  "message": "Welcome, admin"
}


---

 🔐 What Makes This Real-Time Ready?

✅ Passwords are hashed
✅ JWT used for stateless sessions
✅ Middleware-based token validation
✅ Easy to scale with real user models and roles

